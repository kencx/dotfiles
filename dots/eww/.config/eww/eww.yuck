(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :stacking "bg"
  :reserve (struts :side "top" :distance "4%")
  (bar))

(defwindow powermenu
  :monitor 0
  :wm-ignore true
  :windowtype "dock"
  :geometry (geometry :x "0px"
					  :y "0%"
					  :width "20%"
					  :height "10%"
					  :anchor "center center")
  :stacking "fg"
  (powermenu))

; widgets
(defwidget bar []
  (centerbox :orientation "h"
    (left)
	(datetime)
    (right)))


(defwidget powermenu []
  (box :class "powermenu"
	   :orientation "h"
       :space-evenly false
	   :halign "center"
	   :valign "center"
	   :spacing 20
	(button :class "shutdown" :onrightclick "systemctl poweroff" "襤")
	(button :class "reboot" :onrightclick "systemctl reboot" "ﰇ")
	(button :class "lock" :onrightclick "bsplock" "")
	(button :class "logout" :onrightclick "bspc quit" "")))

(defwidget left []
  (box :class "left"
	   :orientation "h"
	   :space-evenly false
	   :halign "start"
	   :spacing 30
	(workspaces)
	(music)))

(defwidget workspaces []
  (literal :content workspaces_listen))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "end"
    {music != "" ? "  ${music}" : ""}))


(defwidget datetime []
  (box :class "datetime" :orientation "h" :space-evenly false :halign "end"
    time))


(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end" :spacing 15
	(system :class "package"
			:icon ""
			:text {package_poll})
    (system :class "cpu"
			:icon ""
			:text "${round(EWW_CPU.avg, 0)}%")
    (system :class "disk"
			:icon ""
			:text "${round(EWW_DISK["/"].free / (1024*1024*1024), 2)} GB")
	(bluetooth)
	(wifi)
	(volume)
  ))

(defwidget system [icon ?class ?visible ?text]
  (box :class "${class} system"
       :orientation "h"
       :halign "center"
       :space-evenly false
       :visible {visible ?: true}
    (label :class "system_icon" :text "${icon} ${text}")
    (children)))

(defwidget bluetooth []
  (system :class "bluetooth"
		  :icon ""
	(eventbox :cursor "pointer"
		(button :onclick `$(./bin/bluetooth)`
		(label :text {bluetooth_poll})))))

(defwidget wifi []
  (system :class "wifi"
		  :icon {wifi_poll.icon}
	(eventbox :cursor "pointer"
			  (button :onclick `$(./bin/nmcli-rofi)`
			  (label :text {wifi_poll.content})))))

(defwidget volume []
  (system :class "volume"
          :icon {vol_poll.icon}
    (eventbox :cursor "pointer"
	          :onscroll `eww update vol_poll="$(./bin/vol {})"`
		(button :onclick `pactl set-sink-mute @DEFAULT_SINK@ toggle`
			(label :text {vol_poll.content})))))


; variables
(deflisten workspaces_listen
  "./bin/workspaces")

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll time :interval "10s"
  "date '+%A %d %b, %H:%M'")

(defpoll package_poll :interval "10s"
  "./bin/package")

(defpoll bluetooth_poll :interval "1s"
  "./bin/bluetooth --status")

(defpoll wifi_poll :interval "1s"
  "./bin/wifi")

(defpoll vol_poll :interval "1s"
   "./bin/vol")
