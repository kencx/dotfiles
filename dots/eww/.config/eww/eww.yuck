(include "./powermenu.yuck")

(defwindow bar
	:monitor 0
	:windowtype "dock"
	:geometry (geometry :x "0%" :y "0%"
		:width "100%" :height "28px"
		:anchor "top center")
	:stacking "bg"
	:reserve (struts :side "top" :distance "4%")
	(bar))


;; widgets
(defwidget bar []
	(centerbox :orientation "h"
		(left)
		(datetime)
		(right)))

(defwidget left []
	(eventbox :onscroll `$(./bin/desktop-scroll {})`
	(box :class "left"
		:orientation "h"
		:space-evenly false
		:halign "start"
		:spacing 30
    (system :class "sxhkd"
        :icon ""
        :text {sxhkd_listen}
        :visible true)
	(workspaces)
	(music))))

(defwidget workspaces []
	(literal :content workspaces_listen))

(defwidget music []
	(box :class "music"
		:orientation "h"
		:space-evenly false
		:halign "end"
		(eventbox :cursor "pointer"
			(button :onclick `playerctl play-pause`
					:onrightclick `playerctl stop`
			(label :limit-width 50
				:text {music != "" ? "  ${music}" : ""})))))


(defwidget datetime []
	(box :class "datetime" :orientation "h" :space-evenly false :halign "end"
		time))


(defwidget right []
	(box :class "right" :orientation "h" :space-evenly false :halign "end" :spacing 24
		(system :class "package"
				:icon ""
				:text "AUR ${aur_poll}"
                :visible {aur_poll != "0" ? true : false})
		(system :class "package"
				:icon ""
				:text {package_poll}
                :visible {package_poll != "" ? true : false})
        (system :class "battery"
                :icon {battery_icon_poll}
                :text {battery_poll}
                :visible {battery_poll != "" ? true : false})
		(system :class "cpu"
				:icon "󰍛"
				:text "${round(EWW_CPU.avg, 0)}%"
                :visible true)
		(system :class "disk"
				:icon ""
				:text "${round(EWW_DISK["/"].free / (1024*1024*1024), 2)} GB"
                :visible true)
		(bluetooth)
		(wifi)
        (vpn)
		(volume)
		(power)))

(defwidget system [icon ?class ?visible ?text]
	(box :class "${class} system"
		:orientation "h"
		:halign "center"
		:space-evenly false
		:visible "${visible}"
	(label :class "system_icon" :text "${icon} ${text}")
	(children)))

(defwidget bluetooth []
	(eventbox :cursor "pointer"
		(button :onclick `$(./bin/bluetooth)`
			(system :class "bluetooth"
					:icon ""
					:text {bluetooth_poll}
                    :visible true))))

(defwidget wifi []
	(eventbox :cursor "pointer"
		(button :onclick `$(./bin/iwd-rofi)`
			(system :class "wifi"
					:icon {wifi_poll.icon}
					:text {wifi_poll.content}
                    :visible true))))

(defwidget vpn []
    (box :class "vpn"
        :tooltip {vpn_poll.hostname}
        :visible {vpn_poll.connected != "false" ? true : false}
        (label :class "" :text "󰦝")))

(defwidget volume []
	(eventbox :cursor "pointer"
			:onscroll `eww update vol_poll="$(./bin/vol {})"`
		(button :onclick `pactl set-sink-mute @DEFAULT_SINK@ toggle`
			(system :class "volume"
				:icon {vol_poll.icon}
				:text {vol_poll.content}
                :visible true))))

(defwidget power []
	(eventbox :cursor "pointer"
		(button :onclick `eww open powermenu &`
				:onrightclick `eww close powermenu &`
		(system :class "power"
				:icon ""
                :visible true))))

; variables
(deflisten workspaces_listen
	"./bin/workspaces")

(deflisten sxhkd_listen :initial ""
	"./bin/sxhkd-watcher")

(deflisten music :initial ""
	"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll time :interval "10s"
	"date '+%A %d %b, %H:%M'")

(defpoll vpn_poll :interval "1m" :initial "{}"
	"./bin/vpn")

(defpoll aur_poll :interval "10m"
	"/home/kenc/bin/aura check | grep -c -v '[I]' || true")

(defpoll package_poll :interval "10m"
	"./bin/updates")

(defpoll battery_poll :interval "10s"
    "./bin/battery --perc")

(defpoll battery_icon_poll :interval "10s"
    "./bin/battery --icon")

(defpoll bluetooth_poll :interval "1s"
	"./bin/bluetooth --status")

(defpoll wifi_poll :interval "1s" :initial "{}"
	"./bin/wifi")

(defpoll vol_poll :interval "1s" :initial "{}"
	"./bin/vol")
