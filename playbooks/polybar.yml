---
- hosts: localhost
  become: true

  vars:
    - download_dir: "/tmp/polybar"

  tasks:
    - name: Check if polybar installed
      stat:
        path: "/usr/local/bin/polybar"
      register: polybar_exists

    - block:
      - name: end playbook if polybar exists
        debug:
          msg: "polybar exists, ending play"
      - meta: end_host
      when: polybar_exists.stat.exists

    - name: Install build dependencies
      apt:
        pkg:
          - build-essential
          - cmake
          - cmake-data
          - pkg-config
          - python3-sphinx
          - python3-packaging

    - name: Install hard dependencies
      apt:
        pkg:
          - libuv1-dev
          - libcairo2-dev
          - libxcb1-dev
          - libxcb-util0-dev
          - libxcb-randr0-dev
          - libxcb-composite0-dev
          - python3-xcbgen
          - xcb-proto
          - libxcb-image0-dev
          - libxcb-ewmh-dev
          - libxcb-icccm4-dev

    - name: Install optional dependencies
      apt:
        pkg:
          - libxcb-xkb-dev
          - libxcb-xrm-dev
          - libxcb-cursor-dev
          - libasound2-dev
          - libpulse-dev
          - libmpdclient-dev
          - libcurl4-openssl-dev
          - libnl-genl-3-dev

    - name: Get latest release
      uri:
        url: "https://api.github.com/repos/polybar/polybar/releases/latest"
        return_content: true
        body_format: json
      register: json_response

    - block:
        - name: Create temp dir
          file:
            path: "{{ download_dir }}"
            state: directory

        - name: "Install and extract polybar {{ json_response.json.tag_name }}"
          unarchive:
            src: "{{ json_response.json.assets.0.browser_download_url }}"
            dest: "{{ download_dir }}"
            remote_src: true
            keep_newer: yes
            extra_opts: [--strip-components=1] # extract directly to {{ download_dir }}

    - block:
        - name: Ensure build directory exists
          file:
            path: "{{ download_dir }}/build"
            state: directory

        - name: Build and compile
          shell: "{{ item }}"
          args:
            chdir: "{{ download_dir }}/build"
          with_items:
            - cmake ..
            - make -j$(nproc)
            - sudo make install

    - name: Remove build dependencies
      apt:
        pkg:
          - build-essential
          - cmake
          - cmake-data
          - pkg-config
          - python3-sphinx
          - python3-packaging
        autoremove: yes
        state: absent
