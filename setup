#!/bin/bash

# do not set -e as stow is supposed to fail in some cases
set -uo pipefail

if ! command -v stow > /dev/null 2>&1; then
    echo "ERROR: \"stow\" not installed"
fi

help() {
	cat << EOF
usage: ./setup [subcommand] [flags] [args]

  Subcommand:
    help       Returns help
    install    Run full installation
    uninstall  Run full uninstallation
    stow       Stow dir
    unstow     Unstow dir

  Flags:
    -a, --all       Act on all subdirectories in \$DOTS_DIR
    -s, --simulate  Simulation mode
    -d, --dots      Set \$DOTS_DIR. Defaults to "./dots"
    -t, --target    Set \$TARGET_DIR. Defaults to "\$HOME"

  Examples:
    # simulate stowing a single dir
    ./setup stow --simulate bspwm

    # stow all dirs
    ./setup stow --all

    # unstow a single dir with custom dots dir
    ./setup unstow --dir dotfiles bspwm
EOF
}

DEFAULT_WARNING="WARNING: in simulation mode so not modifying filesystem."
DOTS_DIR="dots"
TARGET_DIR="$HOME"
SIMULATE=false
UNSTOW=false
ALL=false

build() {
    STOW_COMMAND="stow -v"

    if $SIMULATE; then
        STOW_COMMAND+=" -n"
    fi

    if $UNSTOW; then
        STOW_COMMAND+=" -D"
    fi
}

stow_one() {
    build
    STOW_COMMAND+="-t $TARGET_DIR -d $DOTS_DIR/$1 . 2>&1"
    eval "$STOW_COMMAND"
}

stow_all() {
    local success=0 fail=0 MESSAGE SUCCESS_MATCH

    MESSAGE="Linking all directories in \"./$DOTS_DIR\" to \"$TARGET_DIR\":"
    SUCCESS_MATCH="^LINK:.*"

    if $UNSTOW; then
        MESSAGE="Unlinking all directories in \"./$DOTS_DIR\" to \"$TARGET_DIR\":"
        SUCCESS_MATCH="^UNLINK:.*"
    fi

    if $SIMULATE; then
        echo "RUNNING STOW SIMULATE:"
    fi

    echo "$MESSAGE"
    for dir in dots/*; do
        # skip
        if [[ $dir == "dots/ssh" ]]; then
            continue
        fi

        output="$(stow_one "${dir##*/}")"
        # split output by newline, do not quote within array
        IFS=$'\n' lines=($output)

        for line in "${lines[@]}"; do
            if [[ "$line" =~ $SUCCESS_MATCH ]]; then
                ((success++))
                printf "  %s\n" "$line"
            elif [[ "$line" == "$DEFAULT_WARNING" ]]; then
                :;
            elif [[ "$line" =~ ^WARNING:.* ]]; then
                ((fail++))
            else
                :;
            fi
        done
    done

    if ! ((success+fail)); then
        echo "NO DIRECTORIES STOWED!"
    else
        echo "STOW COMPLETE: $success SUCCESS; $fail FAIL"
    fi
}

full_installation() {
    echo "Stow all dotfiles"
    stow_all

    echo "Install .Xresources"
    cp ./etc/.Xresources "$HOME/.Xresources"

    echo "Install desktop files to $HOME/.local/share/applications"
    mkdir -p "$HOME/.local/share/applications"
    cp ./etc/desktop/* "$HOME/.local/share/applications/"

    echo "Installing neovim plugins"
    nvim --headless "+Lazy! sync" +qa

    echo "Installation complete!"
}

full_uninstallation() {
    echo "Unstow all dotfiles"
    stow_all

    echo "Uninstall .Xresources"
    rm "$HOME/.Xresources"

    echo "Remove desktop files from $HOME/.local/share/applications"
    rm "$HOME/.local/share/applications/"

    echo "Remove all neovim plugins"
    rm -r "$HOME/.local/share/nvim/lazy"

    echo "Installation complete!"
}

parse_flags() {
    while getopts sad:t: opt
    do
        case $opt in
        s)
            SIMULATE=true ;;
        a)
            ALL=true ;;
        d)
            DOTS_DIR=$OPTARG ;;
        t)
            TARGET_DIR=$OPTARG ;;
        \?)
            help
            exit 1 ;;
        esac
    done
}

subcommand=${1:-""}
case $subcommand in
    "install")
        shift
        parse_flags "$@"
        ALL=true
        UNSTOW=false
        full_installation
        ;;
    "uninstall")
        shift
        parse_flags "$@"
        ALL=true
        UNSTOW=true
        full_uninstallation
        ;;
    "stow")
        shift
        parse_flags "$@"
        UNSTOW=false
        if $ALL ; then
            stow_all
        else
            stow_one "$@"
        fi
        ;;
    "unstow")
        shift
        parse_flags "$@"
        UNSTOW=true
        if $ALL ; then
            stow_all
        else
            stow_one "$@"
        fi
        ;;
    "" | "-h" | "--help" | "help")
        help
        exit 1 ;;
esac

shift $((OPTIND-1))


